
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  role: 'role',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  address: 'address',
  emergencyContact: 'emergencyContact'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  specialization: 'specialization'
};

exports.Prisma.NurseScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.LabTechnicianScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.PharmacistScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.FinanceStaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.ReceptionistScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.DoctorAvailabilityScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  day: 'day',
  startTime: 'startTime',
  endTime: 'endTime'
};

exports.Prisma.DoctorSlotScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  day: 'day',
  slotTime: 'slotTime',
  isBooked: 'isBooked'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  status: 'status',
  reason: 'reason',
  dateTime: 'dateTime',
  rescheduledFrom: 'rescheduledFrom',
  createdAt: 'createdAt'
};

exports.Prisma.TriageScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  appointmentId: 'appointmentId',
  nurseId: 'nurseId',
  symptoms: 'symptoms',
  vitals: 'vitals',
  notes: 'notes',
  timestamp: 'timestamp'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  patientId: 'patientId',
  medications: 'medications',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.LabRequestScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  patientId: 'patientId',
  testType: 'testType',
  status: 'status',
  requestedAt: 'requestedAt',
  completedAt: 'completedAt'
};

exports.Prisma.LabResultScalarFieldEnum = {
  id: 'id',
  labRequestId: 'labRequestId',
  labTechnicianId: 'labTechnicianId',
  resultUrl: 'resultUrl',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.PharmacyScalarFieldEnum = {
  id: 'id',
  prescriptionId: 'prescriptionId',
  pharmacistId: 'pharmacistId',
  status: 'status',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinanceScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  amount: 'amount',
  approvalStatus: 'approvalStatus',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt'
};

exports.Prisma.MedicalRecordScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  triageIds: 'triageIds',
  prescriptionIds: 'prescriptionIds',
  labResultIds: 'labResultIds',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  receptionist: 'receptionist',
  nurse: 'nurse',
  doctor: 'doctor',
  lab_technician: 'lab_technician',
  pharmacist: 'pharmacist',
  finance: 'finance',
  patient: 'patient',
  admin: 'admin'
};

exports.Weekday = exports.$Enums.Weekday = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  cancelled: 'cancelled',
  completed: 'completed',
  rescheduled: 'rescheduled'
};

exports.PrescriptionStatus = exports.$Enums.PrescriptionStatus = {
  pending: 'pending',
  fulfilled: 'fulfilled',
  cancelled: 'cancelled'
};

exports.LabRequestStatus = exports.$Enums.LabRequestStatus = {
  requested: 'requested',
  completed: 'completed'
};

exports.PharmacyStatus = exports.$Enums.PharmacyStatus = {
  approved: 'approved',
  dispensed: 'dispensed',
  rejected: 'rejected'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.Prisma.ModelName = {
  User: 'User',
  Patient: 'Patient',
  Doctor: 'Doctor',
  Nurse: 'Nurse',
  LabTechnician: 'LabTechnician',
  Pharmacist: 'Pharmacist',
  FinanceStaff: 'FinanceStaff',
  Receptionist: 'Receptionist',
  DoctorAvailability: 'DoctorAvailability',
  DoctorSlot: 'DoctorSlot',
  Appointment: 'Appointment',
  Triage: 'Triage',
  Prescription: 'Prescription',
  LabRequest: 'LabRequest',
  LabResult: 'LabResult',
  Pharmacy: 'Pharmacy',
  Finance: 'Finance',
  MedicalRecord: 'MedicalRecord'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
