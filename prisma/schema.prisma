generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  role             Role
  name             String
  email            String           @unique
  password         String
  phone            String
  status           UserStatus?      @default(active)       
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  doctor           Doctor?
  nurse            Nurse?
  patient          Patient?
  labTechnician    LabTechnician?
  financeStaff     FinanceStaff?
  receptionist     Receptionist?
  pharmacist       Pharmacist?
}

model Patient {
  id               String         @id @default(uuid())
  userId           String         @unique
  dateOfBirth      DateTime
  gender           String
  address          String
  emergencyContact String
  appointments     Appointment[]
  labRequests      LabRequest[]
  medicalRecord    MedicalRecord?
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  prescriptions    Prescription[]
  medicationBills  MedicationBill[]
  triages          Triage[]
  labTestBills     LabTestBill[]
}

model Doctor {
  id             String               @id @default(uuid())
  userId         String               @unique
  specialization String
  availabilities DoctorAvailability[]
  slots          DoctorSlot[]
  appointments   Appointment[]
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  labRequests    LabRequest[]
  prescriptions  Prescription[]
}

model Nurse {
  id      String @id @default(uuid())
  userId  String @unique
  triages Triage[]
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LabTechnician {
  id          String      @id @default(uuid())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  labResults  LabResult[]
  labTestBills LabTestBill[]
}

model Pharmacist {
  id               String           @id @default(uuid())
  userId           String           @unique
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}  

model FinanceStaff {
  id               String               @id @default(uuid())
  userId           String               @unique
  approvedFinances AppointmentFinance[]
  medicationBills  MedicationBill[]
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Receptionist {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DoctorAvailability {
  id        String  @id @default(uuid())
  doctorId  String
  day       Weekday
  startTime String
  endTime   String
  doctor    Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, day, startTime, endTime])
}

model DoctorSlot {
  id       String  @id @default(uuid())
  doctorId String
  day      Weekday
  slotTime String
  isBooked Boolean @default(false)
  doctor   Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, day, slotTime])
}

model Appointment {
  id              String              @id @default(uuid())
  patientId       String
  doctorId        String
  status          AppointmentStatus
  reason          String
  dateTime        DateTime
  triage          Triage?
  rescheduledFrom String?
  createdAt       DateTime            @default(now())
  doctor          Doctor              @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient         Patient             @relation(fields: [patientId], references: [id], onDelete:Cascade)
  reschedule      Appointment?        @relation("Reschedule", fields: [rescheduledFrom], references: [id])
  rescheduledTo   Appointment[]       @relation("Reschedule")
  finance         AppointmentFinance?
}

model Triage {
  id              String        @id @default(uuid())
  patientId       String
  appointmentId   String?        @unique
  nurseId         String?
  symptoms        String[]
  vitals          Json?
  notes           String?
  appointment     Appointment?   @relation(fields: [appointmentId],references: [id] ,onDelete:Cascade)
  timestamp       DateTime
  patient         Patient?       @relation(fields: [patientId], references: [id] ,onDelete:Cascade)
  nurse           Nurse?        @relation(fields: [nurseId], references: [id])
}

model Prescription {
  id              String             @id @default(uuid())
  doctorId        String
  patientId       String
  labResultId     String?            @unique  // Added unique constraint for one-to-one relation
  medications     Json[]
  status          PrescriptionStatus @default(active)
  notes           String?            
  prescribedAt    DateTime           @default(now())
  medicationBill  MedicationBill[] 
  doctor          Doctor             @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient         Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  labResult       LabResult?         @relation(fields: [labResultId], references: [id])
}

model LabRequest {
  id            String           @id @default(uuid())
  doctorId      String
  patientId     String
  status        LabRequestStatus @default(requested)
  approvalStatus ApprovalStatus @default(pending)
  notes         String?
  priority      LabRequestPriority?
  tests         Json             // Array of lab tests as JSON
  requestedAt   DateTime         @default(now())
  completedAt   DateTime?
  labTestBill   LabTestBill?

  doctor        Doctor           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient       Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  labResult     LabResult?
}

model LabResult {
  id              String         @id @default(uuid())
  labRequestId    String         @unique
  labTechnicianId String
  result          Json           // URL to PDF/image file
  notes           String?
  createdAt       DateTime       @default(now())
  prescription    Prescription?
  labRequest      LabRequest     @relation(fields: [labRequestId], references: [id], onDelete: Cascade)
  labTechnician   LabTechnician  @relation(fields: [labTechnicianId], references: [id], onDelete: Cascade)
}


model AppointmentFinance {
  id             String         @id @default(uuid())
  appointmentId  String         @unique
  amount         Decimal
  approvalStatus ApprovalStatus @default(pending)
  financeStaffId String
  approvedAt     DateTime?
  appointment    Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  financeStaff   FinanceStaff   @relation(fields: [financeStaffId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

}

model MedicationBill {
  id              String         @id @default(uuid())
  patientId       String
  prescriptionId  String
  financeStaffId  String
  medications     Json           // Contains medication details, prices, etc.
  totalAmount     Float
  approvalStatus  ApprovalStatus @default(pending)
  paidAt          DateTime       @default(now())
  
  financeStaff    FinanceStaff   @relation(fields: [financeStaffId], references: [id], onDelete: Cascade)
  patient         Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  prescription    Prescription   @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
}

model LabTestBill {
  id              String         @id @default(uuid())
  patientId       String
  labRequestId    String         @unique
  labTechnicianId String
  tests           Json           // List of performed tests and their prices
  totalAmount     Float
  approvalStatus  ApprovalStatus @default(pending)
  paidAt          DateTime       @default(now())

  patient         Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  labRequest      LabRequest     @relation(fields: [labRequestId], references: [id], onDelete: Cascade)
  labTechnician   LabTechnician  @relation(fields: [labTechnicianId], references: [id], onDelete: Cascade)
}

model MedicalRecord {
  id              String   @id @default(uuid())
  patientId       String   @unique
  triageIds       String[]
  prescriptionIds String[]
  labResultIds    String[]
  createdAt       DateTime @default(now())
  patient         Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

enum Role {
  receptionist
  nurse
  doctor
  lab_technician
  pharmacist
  finance
  patient
  admin
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
  completed
  rescheduled
}



enum PrescriptionStatus {
  active
  fulfilled
  cancelled
}

enum LabRequestStatus {
  requested
  completed
}



enum ApprovalStatus {
  pending
  approved
  rejected
}

enum LabRequestPriority {
  urgent
  routine
}
enum UserStatus{
  active
  suspend
}